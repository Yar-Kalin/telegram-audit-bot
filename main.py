import telebot
import openai
import gspread
import os
import json
from google.oauth2.service_account import Credentials

# === –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv("8324684049:AAHgau8u2GpP4yeiy_zmpq4ZMoo8FWIenUw")
OPENAI_API_KEY = os.getenv("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")
GOOGLE_CREDS_JSON = os.getenv("audit-bot@audit-bot-473810.iam.gserviceaccount.com")

if not TELEGRAM_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN")
if not OPENAI_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω OPENAI_API_KEY")
if not GOOGLE_CREDS_JSON:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω GOOGLE_CREDS")
else:
    try:
        creds_dict = json.loads(GOOGLE_CREDS_JSON)
        print("‚úÖ Google Credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ
def get_google_sheet():
    try:
        scopes = [
            "https://spreadsheets.google.com/feeds",
            "https://www.googleapis.com/auth/drive"
        ]
        credentials = Credentials.from_service_account_info(json.loads(GOOGLE_CREDS_JSON), scopes=scopes)
        client = gspread.authorize(credentials)
        sheet = client.open("SEO_Audit_Logs").sheet1  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ —Ç–∞–∫
        return sheet
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google –¢–∞–±–ª–∏—Ü–µ: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(
        message,
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî SEO/UX-–∞—É–¥–∏—Ç –±–æ—Ç.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:\n"
        "`/–∞—É–¥–∏—Ç https://–≤–∞—à-—Å–∞–π—Ç.com`\n"
        "‚Äî –∏ –ø–æ–ª—É—á–∏ –æ—Ç—á—ë—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞ 1 –º–∏–Ω—É—Ç—É.",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /–∞—É–¥–∏—Ç
@bot.message_handler(commands=['–∞—É–¥–∏—Ç'])
def audit(message):
    try:
        url = message.text.split()[1]
    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ URL –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n`/–∞—É–¥–∏—Ç https://example.com`", parse_mode="Markdown")
        return

    bot.send_message(message.chat.id, "üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é SEO/UX-–∞—É–¥–∏—Ç –¥–ª—è —Å–∞–π—Ç–∞: " + url)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ —á–µ—Ä–µ–∑ ChatGPT
    try:
        client = openai.OpenAI(api_key=OPENAI_API_KEY)
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{
                "role": "user",
                "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–∞–π—Ç {url} –∏ –¥–∞–π 10 SEO/UX —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. "
                           "–§–æ—Ä–º–∞—Ç: –ù–æ–º–µ—Ä. [–ö–∞—Ç–µ–≥–æ—Ä–∏—è] ‚Äî –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞: ... ‚Ä¢ –†–µ—à–µ–Ω–∏–µ: ..."
            }],
            max_tokens=800
        )
        report = response.choices[0].message.content
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Google –¢–∞–±–ª–∏—Ü—É
    sheet = get_google_sheet()
    if sheet:
        try:
            sheet.append_row([
                message.from_user.id,
                message.from_user.username or "",
                url,
                message.date,
                report[:5000]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
            ])
            bot.send_message(message.chat.id, "üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É.")
        except Exception as e:
            bot.send_message(message.chat.id, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        bot.send_message(message.chat.id, f"üìå *SEO/UX –ê—É–¥–∏—Ç —Å–∞–π—Ç–∞ {url}:*\n\n{report}", parse_mode="Markdown")
    except:
        for i in range(0, len(report), 3500):
            bot.send_message(message.chat.id, report[i:i+3500])

    # –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (–±–µ–∑ –æ–ø–ª–∞—Ç—ã)
    bot.send_message(
        message.chat.id,
        "‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
        "üì© –•–æ—Ç–∏—Ç–µ PDF-–≤–µ—Ä—Å–∏—é –∏–ª–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑?\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: @–≤–∞—à_–Ω–∏–∫\n"
        "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å —É–ª—É—á—à–µ–Ω–∏–µ–º –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞!"
    )

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
print("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞...")
bot.polling(none_stop=True)
